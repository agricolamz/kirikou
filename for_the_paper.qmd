---
title: "Development of narrative competence in Mano and Kpelle, Mande"
date: today
date-format: D.MM.YYYY
format: 
  html:
    toc: true
df-print: paged
execute:
  warning: false
  message: false
fig-height: 6
fig-width: 10
editor: source
code-fold: true
editor_options: 
  chunk_output_type: console
---

```{r}
#| message: false

# setwd("/home/agricolamz/work/articles/2025_kirikou/repo/")
library(tidyverse)
theme_set(theme_minimal() +theme(legend.position = "bottom", 
                                text = element_text(size = 16)))

readxl::read_xlsx("kirikou_annotations.xlsx", sheet = "kirikou Mano") |>
  select(-elicitation_date) |> 
  mutate(text_type = "kirikou") |>
  bind_rows(readxl::read_xlsx("kirikou_annotations.xlsx", sheet = "folktales Mano children") |> 
              mutate(text_type = "folktales")) |> 
  rename(chunk_structure = `chunk structure`,
         time_end = `temps de fin - hh:mm:ss.ms`, 
         time_start =`Temps de départ - hh:mm:ss.ms`) |> 
  mutate(txenfant = str_remove_all(txenfant , "[/+]"),
         txenfant = str_remove_all(txenfant, "\\[.*?\\]"),
         txenfant = if_else(is.na(txenfant), "", txenfant),
         ft = if_else(is.na(ft), "", ft),
         comment = if_else(is.na(comment), "", comment),
         chunk_structure = if_else(is.na(chunk_structure), "", chunk_structure)) |>
  add_count(name, age, source) |> 
  rename(n_chunks = n) |> 
  group_by(name, age, source, socio_family_adoptive, text_type, residence_place, n_chunks) |> 
  summarize(text = str_c(txenfant, collapse = " "),
            chunk_structure = str_c(chunk_structure, collapse = " "),
            ft = str_c(ft, collapse = " "),
            comment = str_c(comment, collapse = " "),
            time_start = min(time_start),
            time_end = max(time_end),
            duration = time_end - time_start) |> 
  mutate(age_group = "children") |> 
  select(-time_start, -time_end) |> 
  ungroup() ->
  mano_chi_corpus

readxl::read_xlsx("kirikou_annotations.xlsx", sheet = "folktales Mano adults") |> 
  mutate(age = 100,
         text_type = "folktales") |> 
  rename(txenfant = `txenfant = tx`,
         chunk_structure = `chunk structure`,
         time_end = `temps de fin - hh:mm:ss.ms`, 
         time_start =`Temps de départ - hh:mm:ss.ms`) |> 
  mutate(txenfant = str_remove_all(txenfant , "[/+]"),
         txenfant = str_remove_all(txenfant, "\\[.*?\\]"),
         txenfant = if_else(is.na(txenfant), "", txenfant),
         ft = if_else(is.na(ft), "", ft),
         comment = if_else(is.na(comment), "", comment),
         chunk_structure = if_else(is.na(chunk_structure), "", chunk_structure)) |>
  add_count(name, age, source) |> 
  rename(n_chunks = n) |> 
  group_by(name, age, source, socio_family_adoptive, text_type, residence_place, n_chunks) |> 
  summarize(text = str_c(txenfant, collapse = " "),
            chunk_structure = str_c(chunk_structure, collapse = " "),
            ft = str_c(ft, collapse = " "),
            comment = str_c(comment, collapse = " "),
            time_start = min(time_start),
            time_end = max(time_end),
            duration = time_end - time_start,
            duration = lubridate::as.duration(duration)) |> 
  select(-time_start, -time_end) |> 
  mutate(age_group = "adults") |> 
  bind_rows(mano_chi_corpus) |> 
  mutate(group_var = case_when(text_type == "kirikou" & residence_place == "Nzerekore" & socio_family_adoptive == "Mano" ~ "Kirikou (Nzerekore): Mano",
                               text_type == "kirikou" & residence_place == "Nzerekore" & socio_family_adoptive == "Bilingual" ~ "Kirikou (Nzerekore): Bilingual",
                               text_type == "kirikou" & residence_place != "Nzerekore" ~ "Kirikou (other)",
                               text_type == "folktales" & age_group == "children" ~ "folktales (children)",
                               text_type == "folktales" & age_group == "adults" ~ "folktales (adults)")) |> 
  ungroup() |> 
  mutate(new_name = name |> factor() |> as.integer(),
         new_name = str_c("s_", new_name)) |> 
  group_by(new_name) |> 
  mutate(new_source = source |> factor() |> as.integer(),
         new_source = str_c(new_name, "_t_", new_source)) |> 
  relocate(new_name, .after = name) |> 
  relocate(new_source, .after = source) |> 
  ungroup() ->
  mano_corpus

rm(mano_chi_corpus)

library(paletteer)
colors_m <- paletteer_dynamic("ggthemes_ptol::qualitative", 5)

people_text_color_m <- 
  c(colors_m[1], # s_2_t_1  Kirikou (Nzerekore): Bilingual
  colors_m[3], # s_3_t_1  Kirikou (other)
  colors_m[1], # s_15_t_1 Kirikou (Nzerekore): Bilingual
  colors_m[2], # s_11_t_1 Kirikou (Nzerekore): Mano
  colors_m[5], # s_4_t_1  folktales (children)
  colors_m[5], # s_4_t_2  folktales (children)
  colors_m[2], # s_5_t_1  Kirikou (Nzerekore): Mano
  colors_m[3], # s_8_t_1  Kirikou (other)
  colors_m[2], # s_10_t_1 Kirikou (Nzerekore): Mano
  colors_m[3], # s_18_t_1 Kirikou (other)
  colors_m[5], # s_4_t_3  folktales (children)
  colors_m[1], # s_9_t_1  Kirikou (Nzerekore): Bilingual
  colors_m[1], # s_20_t_1 Kirikou (Nzerekore): Bilingual
  colors_m[1], # s_13_t_1 Kirikou (Nzerekore): Bilingual
  colors_m[1], # s_4_t_4  Kirikou (Nzerekore): Bilingual
  colors_m[3], # s_16_t_1 Kirikou (other)
  colors_m[5], # s_14_t_1 folktales (children)
  colors_m[5], # s_14_t_2 folktales (children)
  colors_m[5], # s_14_t_3 folktales (children)
  colors_m[2], # s_17_t_1 Kirikou (Nzerekore): Mano
  colors_m[3], # s_12_t_1 Kirikou (other)
  colors_m[5], # s_21_t_1 folktales (children)
  colors_m[4], # s_1_t_1  folktales (adults)
  colors_m[4], # s_19_t_1 folktales (adults)
  colors_m[4], # s_6_t_1  folktales (adults)
  colors_m[4], # s_6_t_2  folktales (adults)
  colors_m[4], # s_7_t_1  folktales (adults)
  colors_m[4]  # s_7_t_2  folktales (adults)
  )

## Kpelle

readxl::read_xlsx("kirikou_annotations.xlsx", sheet = "folktales Kpelle children") |>
  select(-elicitation_date) |> 
  mutate(text_type = "folktales") |>
  rename(chunk_structure = `chunk structure`,
         time_end = `temps de fin - hh:mm:ss.ms`, 
         time_start =`Temps de départ - hh:mm:ss.ms`) |> 
  mutate(txenfant = str_remove_all(txenfant , "[/+]"),
         txenfant = str_remove_all(txenfant, "\\[.*?\\]"),
         txenfant = if_else(is.na(txenfant), "", txenfant),
         ft = if_else(is.na(ft), "", ft),
         comment = if_else(is.na(comment), "", comment),
         chunk_structure = if_else(is.na(chunk_structure), "", chunk_structure)) |>
  add_count(name, age, source) |> 
  rename(n_chunks = n) |> 
  group_by(name, age, source, socio_family_adoptive, text_type, residence_place, n_chunks) |> 
  summarize(text = str_c(txenfant, collapse = " "),
            chunk_structure = str_c(chunk_structure, collapse = " "),
            ft = str_c(ft, collapse = " "),
            comment = str_c(comment, collapse = " "),
            time_start = min(time_start),
            time_end = max(time_end),
            duration = time_end - time_start) |> 
  mutate(age_group = "children") |> 
  select(-time_start, -time_end) |> 
  ungroup() ->
  kpelle_chi_corpus

readxl::read_xlsx("kirikou_annotations.xlsx", sheet = "folktales Kpelle adults") |>
  select(-elicitation_date) |> 
  mutate(text_type = "folktales") |>
  rename(chunk_structure = `chunk structure`,
         time_end = `temps de fin - hh:mm:ss.ms`, 
         time_start =`Temps de départ - hh:mm:ss.ms`) |> 
  mutate(txenfant = str_remove_all(txenfant , "[/+]"),
         txenfant = str_remove_all(txenfant, "\\[.*?\\]"),
         txenfant = if_else(is.na(txenfant), "", txenfant),
         ft = if_else(is.na(ft), "", ft),
         comment = if_else(is.na(comment), "", comment),
         chunk_structure = if_else(is.na(chunk_structure), "", chunk_structure)) |>
  add_count(name, age, source) |> 
  rename(n_chunks = n) |> 
  group_by(name, age, source, socio_family_adoptive, text_type, residence_place, n_chunks) |> 
  summarize(text = str_c(txenfant, collapse = " "),
            chunk_structure = str_c(chunk_structure, collapse = " "),
            ft = str_c(ft, collapse = " "),
            comment = str_c(comment, collapse = " "),
            time_start = min(time_start),
            time_end = max(time_end),
            duration = time_end - time_start) |> 
  mutate(age_group = "adults") |> 
  select(-time_start, -time_end) |> 
  ungroup() |> 
  bind_rows(kpelle_chi_corpus) |> 
  mutate(group_var = age_group) |> 
  ungroup() |> 
  mutate(new_name = name |> factor() |> as.integer(),
         new_name = str_c("s_", new_name)) |> 
  group_by(new_name) |> 
  mutate(new_source = source |> factor() |> as.integer(),
         new_source = str_c(new_name, "_t_", new_source)) |> 
  relocate(new_name, .after = name) |> 
  relocate(new_source, .after = source) |> 
  ungroup() ->
  kpelle_corpus

rm(kpelle_chi_corpus)
```

## Общая информация про корпус 

### Мано

Соответствие кодов:

```{r}
mano_corpus |> 
  select(new_source, name, age, source, group_var)
```

Длительность в чанках, в количестве предикаций и в секундах.

```{r}
mano_corpus |> 
  mutate(n_predecations = str_count(chunk_structure, "\\[")) |> 
  select(new_source, group_var, n_chunks, n_predecations, duration) |>
  arrange(-n_predecations) ->
  total_stats_m

total_stats_m

n_predecations_m <- sum(total_stats_m$n_predecations)
n_duration_m <- sum(total_stats_m$duration)
hours_m <- floor(n_duration_m/60/60)
minutes_m <- ceiling(n_duration_m/60 - hours_m*60)
```

Общая длительность корпуса `r hours_m` часа `r minutes_m` минут. Всего в корпусе `r n_predecations_m` предикаций.

### Кпелле

Соответствие кодов:

```{r}
kpelle_corpus |> 
  select(new_source, name, age, source, group_var)
```

Длительность в чанках, в количестве предикаций и в секундах.

```{r}
kpelle_corpus |> 
  mutate(n_predecations = str_count(chunk_structure, "\\[")) |> 
  select(new_source, group_var, n_chunks, n_predecations, duration) |>
  arrange(-n_predecations) ->
  total_stats_k

total_stats_k

n_predecations_k <- sum(total_stats_k$n_predecations)
n_duration_k <- sum(total_stats_k$duration) |> ceiling()
```

Общая длительность корпуса `r n_duration_k` минуты. Всего в корпусе `r n_predecations_k` предикаций.


## TAMP

### Mano

```{r}
mano_corpus |> 
  select(new_source, age, group_var, chunk_structure) |> 
  mutate(PST = str_count(chunk_structure, "PST"),
         JNT = str_count(chunk_structure, "JNT"),
         IPFV = str_count(chunk_structure, "IPFV"),
         PRED = str_count(chunk_structure, "PRED"),
         EXI = str_count(chunk_structure, "EXI"),
         CONJ = str_count(chunk_structure, "CONJ"),
         PRF = str_count(chunk_structure, "PRF"),
         FUT = str_count(chunk_structure, "FUT"),
         NEG.COND = str_count(chunk_structure, "NEG.COND"),
         NEG = str_count(chunk_structure, "NEG") - NEG.COND,
         COND = str_count(chunk_structure, "COND"),
         IMP = str_count(chunk_structure, "IMP"),
         PROSP = str_count(chunk_structure, "PROSP"),
         PROT.IRR = str_count(chunk_structure, "PROT.IRR"),
         APOD.IRR = str_count(chunk_structure, "APOD.IRR"),
         IRR = str_count(chunk_structure, "APOD.IRR"),
         PROH = str_count(chunk_structure, "PROH")) |> 
  select(-chunk_structure) ->
  tense_m

perc_pst_m <- floor(sum(tense_m$PST)/n_predecations_m*100)
perc_jnt_m <- floor(sum(tense_m$JNT)/n_predecations_m*100)
```

Overall, in our corpus they were used `r sum(tense_m$PST)` and `r sum(tense_m$JNT)`  times respectively, or `r perc_pst_m`% and `r perc_jnt_m`%, out of `r n_predecations_m` finite predications total. 

The individual breakdown of TAMP constructions (note that some constructions are put into thematic groups to simplify representation, see Supplement for details on the groups) in individual texts looks as follows, where the speakers are sorted by their age:

```{r}
tense_m |> 
  pivot_longer(names_to = "tense", values_to = "n", -c(new_source, age, group_var)) |> 
  mutate(tense = case_when(tense %in% c("COND", "IRR", "PROT.IRR", "APOD.IRR", "NEG.COND") ~ "CONDs",
                           tense %in% c("PROH", "IMP") ~ "PROH or IMP",
                           tense %in% c("EXI", "PRED", "IPFV", "FUT", "PROSP") ~ "non-past",
                           TRUE ~ tense)) |> 
  group_by(new_source, age, group_var, tense) |>
  summarise(n = sum(n)) |> 
  group_by(new_source, age, group_var) |> 
  mutate(total = sum(n),
         ratio = n/total) |> 
  select(-n, -total) |> 
  ungroup() |> 
  mutate(age2 = if_else(age == 100, "ad", as.character(age)),
         new_source = str_c(new_source, " (", age2, ")"),
         new_source = fct_reorder(new_source, age),
         tense = factor(tense, levels = c("CONDs", "PROH or IMP",
                                          "non-past","NEG", "CONJ",
                                          "PRF", "JNT", "PST")),
         label = str_c(round(ratio * 100), "%")) |>
  filter(ratio > 0) |>
  ggplot(aes(x = ratio, y = new_source, label = label, color = tense)) +
  geom_col(aes(fill = tense)) +
  geom_label(position = position_fill(vjust = 0.5), fill = "white") +
  scale_x_continuous(label = scales::percent) +
  labs(x = NULL, y = NULL, fill = NULL) +
  theme(axis.text.y = element_text(colour = people_text_color_m)) +
  guides(color = "none")
```


```{r}
mano_corpus |> 
  mutate(chunk_structure = str_remove_all(chunk_structure, "rs%.*?%"),
         n_predecations = str_count(chunk_structure, "\\[")) |> 
  select(new_source, age, group_var, chunk_structure, n_predecations) |> 
  mutate(PST = str_count(chunk_structure, "PST"),
         JNT = str_count(chunk_structure, "JNT"),
         IPFV = str_count(chunk_structure, "IPFV"),
         PRED = str_count(chunk_structure, "PRED"),
         EXI = str_count(chunk_structure, "EXI"),
         CONJ = str_count(chunk_structure, "CONJ"),
         PRF = str_count(chunk_structure, "PRF"),
         FUT = str_count(chunk_structure, "FUT"),
         NEG.COND = str_count(chunk_structure, "NEG.COND"),
         NEG = str_count(chunk_structure, "NEG") - NEG.COND,
         COND = str_count(chunk_structure, "COND"),
         IMP = str_count(chunk_structure, "IMP"),
         PROSP = str_count(chunk_structure, "PROSP"),
         PROT.IRR = str_count(chunk_structure, "PROT.IRR"),
         APOD.IRR = str_count(chunk_structure, "APOD.IRR"),
         IRR = str_count(chunk_structure, "IRR") - PROT.IRR - APOD.IRR,
         PROH = str_count(chunk_structure, "PROH")) |> 
  select(-chunk_structure) ->
  tense_without_RS_m

n_predecations_without_RS_m <- sum(tense_without_RS_m$n_predecations)

perc_pst_without_RS_m <- floor(sum(tense_without_RS_m$PST)/n_predecations_without_RS_m*100)
perc_jnt_without_RS_m <- floor(sum(tense_without_RS_m$JNT)/n_predecations_without_RS_m*100)
```

By excluding reported speech we arrive at an even higher proportion: `r sum(tense_without_RS_m$PST)` and `r sum(tense_without_RS_m$JNT)` tokens of PST and JNT, respectively, representing `r perc_pst_without_RS_m`% and `r perc_jnt_without_RS_m`% of predications.

The difference between distributions of TAMP constructions within reported speech and in the narrative chain alone indicates that PST and JNT are indeed mostly narrative tenses, while other forms are used in both and some are mostly restricted to the conversational domain, such as the imperative which was used outside reported speech only `r sum(tense_without_RS_m$IMP)` times out of `r sum(tense_m$IMP)`.

```{r}
tense_without_RS_m |> 
  select(-n_predecations) |> 
  pivot_longer(names_to = "tense", values_to = "n", -c(new_source, age, group_var)) |> 
  mutate(tense = case_when(tense %in% c("COND", "IRR", "PROT.IRR", "APOD.IRR", "NEG.COND") ~ "CONDs",
                           tense %in% c("PROH", "IMP") ~ "PROH or IMP",
                           tense %in% c("EXI", "PRED", "IPFV", "FUT", "PROSP") ~ "non-past",
                           TRUE ~ tense)) |>  
  group_by(new_source, age, group_var, tense) |>
  summarise(n = sum(n)) |> 
  group_by(new_source, age, group_var) |> 
  mutate(total = sum(n),
         ratio = n/total) |> 
  select(-n, -total) |> 
  ungroup() |> 
  mutate(age2 = if_else(age == 100, "ad", as.character(age)),
         new_source = str_c(new_source, " (", age2, ")"),
         new_source = fct_reorder(new_source, age),
         tense = factor(tense, levels = c("CONDs", "PROH or IMP",
                                          "non-past","NEG", "CONJ",
                                          "PRF", "JNT", "PST")),
         label = str_c(round(ratio * 100), "%")) |>
  filter(ratio > 0) |>
  ggplot(aes(x = ratio, y = new_source, label = label, color = tense)) +
  geom_col(aes(fill = tense)) +
  geom_label(position = position_fill(vjust = 0.5), fill = "white") +
  scale_x_continuous(label = scales::percent) +
  labs(x = NULL, y = NULL, fill = NULL) +
  theme(axis.text.y = element_text(colour = people_text_color_m)) +
  guides(color = "none")
```

### Kpelle

```{r}
kpelle_corpus |> 
  select(new_source, age, group_var, chunk_structure) |> 
  mutate(CONJ_PST = str_count(chunk_structure, "CONJ/PST"),
         PST = str_count(chunk_structure, "PST")-CONJ_PST,
         CONJ = str_count(chunk_structure, "CONJ")-CONJ_PST,
         JNT = str_count(chunk_structure, "JNT"),
         QUOT = str_count(chunk_structure, "QUOT"),
         PRF = str_count(chunk_structure, "PRF"),
         IRR_COND = str_count(chunk_structure, "IRR/COND"),
         COND = str_count(chunk_structure, "COND")-IRR_COND,
         IRR = str_count(chunk_structure, "IRR")-IRR_COND,
         NEG = str_count(chunk_structure, "NEG"),
         EXI = str_count(chunk_structure, "EXI"),
         PRED = str_count(chunk_structure, "PRED"),
         RESSTAT = str_count(chunk_structure, "RESSTAT"),
         STAT1 = str_count(chunk_structure, "STAT1"),
         FUT = str_count(chunk_structure, "FUT"),
         IMP = str_count(chunk_structure, "IMP"),
         PROH = str_count(chunk_structure, "PROH")) |> 
  select(-chunk_structure) ->
  tense_k

tense_k
```

> Kpelle: how many times PST, CONJ, CONJ/PST and JNT total in Kpelle, how many total predications

- PST: `r sum(tense_k$PST)`
- CONJ: `r sum(tense_k$CONJ)` 
- CONJ/PST: `r sum(tense_k$CONJ_PST)`
- JNT: `r sum(tense_k$JNT)`
- total predications: `r n_predecations_k`


```{r}
tense_k |> 
  pivot_longer(names_to = "tense", values_to = "n", -c(new_source, age, group_var)) |> 
  mutate(tense = case_when(tense %in% c("JNT", "QUOT") ~ "JNT or QUOT",
                           tense %in% c("COND", "IRR", "IRR_COND") ~ "CONDs",
                           tense %in% c("PROH", "IMP") ~ "PROH or IMP",
                           tense %in% c("EXI", "PRED", "RESSTAT", "FUT", "STAT1") ~ "non-past",
                           TRUE ~ tense)) |> 
  group_by(new_source, age, group_var, tense) |>
  summarise(n = sum(n)) |> 
  group_by(new_source, age, group_var) |> 
  mutate(total = sum(n),
         ratio = n/total) |> 
  select(-n, -total) |> 
  ungroup() |> 
  mutate(new_source = str_c(new_source, " (", age, ")"),
         new_source = fct_reorder(new_source, age),
         tense = factor(tense, levels = c("PROH or IMP", "non-past", 
                                          "NEG", "CONDs", "PRF",
                                          "JNT or QUOT", "CONJ_PST", 
                                          "CONJ", "PST")),
         label = str_c(round(ratio * 100), "%")) |>
  filter(ratio > 0) |>
  ggplot(aes(x = ratio, y = new_source, label = label, color = tense)) +
  geom_col(aes(fill = tense)) +
  geom_label(position = position_fill(vjust = 0.5), fill = "white") +
  scale_x_continuous(label = scales::percent) +
  labs(x = NULL, y = NULL, fill = NULL) +
  guides(color = "none")
```

> Kpelle: how many times PST, CONJ, CONJ/PST and JNT excluding RS in Kpelle, how many total predications excluding RS

```{r}
kpelle_corpus |> 
  mutate(chunk_structure = str_remove_all(chunk_structure, "rs%.*?%"),
         n_predecations = str_count(chunk_structure, "\\[")) |> 
  select(new_source, age, group_var, chunk_structure, n_predecations) |> 
  mutate(CONJ_PST = str_count(chunk_structure, "CONJ/PST"),
         PST = str_count(chunk_structure, "PST")-CONJ_PST,
         CONJ = str_count(chunk_structure, "CONJ")-CONJ_PST,
         JNT = str_count(chunk_structure, "JNT"),
         QUOT = str_count(chunk_structure, "QUOT"),
         PRF = str_count(chunk_structure, "PRF"),
         IRR_COND = str_count(chunk_structure, "IRR/COND"),
         COND = str_count(chunk_structure, "COND")-IRR_COND,
         IRR = str_count(chunk_structure, "IRR")-IRR_COND,
         NEG = str_count(chunk_structure, "NEG"),
         EXI = str_count(chunk_structure, "EXI"),
         PRED = str_count(chunk_structure, "PRED"),
         RESSTAT = str_count(chunk_structure, "RESSTAT"),
         STAT1 = str_count(chunk_structure, "STAT1"),
         FUT = str_count(chunk_structure, "FUT"),
         IMP = str_count(chunk_structure, "IMP"),
         PROH = str_count(chunk_structure, "PROH")) |> 
  select(-chunk_structure) ->
  tense_without_RS_k

n_predecations_without_RS_k <- sum(tense_without_RS_k$n_predecations)
```

- PST: `r sum(tense_without_RS_k$PST)`
- CONJ: `r sum(tense_without_RS_k$CONJ)` 
- CONJ/PST: `r sum(tense_without_RS_k$CONJ_PST)`
- JNT: `r sum(tense_without_RS_k$JNT)`
- total predications: `r n_predecations_without_RS_k`

```{r}
tense_without_RS_k |> 
  select(-n_predecations) |> 
  pivot_longer(names_to = "tense", values_to = "n", -c(new_source, age, group_var)) |> 
  mutate(tense = case_when(tense %in% c("JNT", "QUOT") ~ "JNT or QUOT",
                           tense %in% c("COND", "IRR", "IRR_COND") ~ "CONDs",
                           tense %in% c("PROH", "IMP") ~ "PROH or IMP",
                           tense %in% c("EXI", "PRED", "RESSTAT", "FUT", "STAT1") ~ "non-past",
                           TRUE ~ tense)) |> 
  group_by(new_source, age, group_var, tense) |>
  summarise(n = sum(n)) |> 
  group_by(new_source, age, group_var) |> 
  mutate(total = sum(n),
         ratio = n/total) |> 
  select(-n, -total) |> 
  ungroup() |> 
  mutate(new_source = str_c(new_source, " (", age, ")"),
         new_source = fct_reorder(new_source, age),
         tense = factor(tense, levels = c("PROH or IMP", "non-past", 
                                          "NEG", "CONDs", "PRF",
                                          "JNT or QUOT", "CONJ_PST", 
                                          "CONJ", "PST")),
         label = str_c(round(ratio * 100), "%")) |>
  filter(ratio > 0) |>
  ggplot(aes(x = ratio, y = new_source, label = label, color = tense)) +
  geom_col(aes(fill = tense)) +
  geom_label(position = position_fill(vjust = 0.5), fill = "white") +
  scale_x_continuous(label = scales::percent) +
  labs(x = NULL, y = NULL, fill = NULL) + 
  guides(color = NULL)
```

## IMP vs PROH

### Mano

```{r}
mano_corpus |> 
  select(new_source, group_var, chunk_structure) |> 
  mutate(imp = str_count(chunk_structure, "IMP"),
         proh = str_count(chunk_structure, "PROH"),
         ors = str_remove_all(chunk_structure, "rs%.*?%"),
         imp_ors = str_count(ors, "IMP"),
         proh_ors = str_count(ors, "PROH")) |> 
  summarise(imp = sum(imp),
            proh = sum(proh),
            imp_ors = sum(imp_ors),
            proh_ors = sum(proh_ors)) ->
  imp_proh_m
```

There are only `r imp_proh_m$imp_ors` utterances of IMP outside of RS out of `r imp_proh_m$imp` total utterances. There are only `r imp_proh_m$proh_ors` utterances of PROH outside of RS out of `r imp_proh_m$proh` total utterances.

### Kpelle

```{r}
kpelle_corpus |> 
  select(new_source, group_var, chunk_structure) |> 
  mutate(imp = str_count(chunk_structure, "IMP"),
         proh = str_count(chunk_structure, "PROH"),
         ors = str_remove_all(chunk_structure, "rs%.*?%"),
         imp_ors = str_count(ors, "IMP"),
         proh_ors = str_count(ors, "PROH")) |> 
  summarise(imp = sum(imp),
            proh = sum(proh),
            imp_ors = sum(imp_ors),
            proh_ors = sum(proh_ors)) ->
  imp_proh_k
```

There are only `r imp_proh_k$imp_ors` utterances of IMP outside of RS out of `r imp_proh_k$imp` total utterances. There are only `r imp_proh_k$proh_ors` utterances of PROH outside of RS out of `r imp_proh_k$proh` total utterances.

## RES+RETR+PHAS/IMPF

### Mano

> Mano: calculate and vizualize individual ratios of RES+PHAS+RETR to text length in predications outside RS

```{r}
mano_corpus |> 
  select(new_source, group_var, chunk_structure) |> 
  mutate(chunk_structure = str_remove_all(chunk_structure, "rs%.*?%"),
         res = str_count(chunk_structure, "RES"),
         phas = str_count(chunk_structure, "PHAS"),
         retr = str_count(chunk_structure, "RETR")) |> 
  summarise(res = sum(res),
            phas = sum(phas),
            retr = sum(retr)) ->
  res_phas_retr

percantage_res_m <- round((res_phas_retr$res)/n_predecations_without_RS_m*100)
percantage_phas_m <- round((res_phas_retr$phas)/n_predecations_without_RS_m*100)
percantage_retr_m <- round((res_phas_retr$retr)/n_predecations_without_RS_m*100)

res_phas_retr_sum_m <- sum(res_phas_retr)
percantage_res_phas_retr_m <- round((res_phas_retr_sum_m)/n_predecations_without_RS_m*100)
```

- There are only `r res_phas_retr_sum_m` utterances of RES/PHAS/RETR outside of RS (`r percantage_res_phas_retr_m`%).
- There are only `r res_phas_retr$res` utterances of RES outside of RS (`r percantage_res_m`%). 
- There are only `r res_phas_retr$phas` utterances of PHAS outside of RS (`r percantage_phas_m`%). 
- There are only `r res_phas_retr$retr` utterances of RETR outside of RS (`r percantage_retr_m`%).

```{r}
mano_corpus |> 
  select(new_source, age, group_var, chunk_structure) |> 
  mutate(chunk_structure = str_remove_all(chunk_structure, "rs%.*?%"),
         res = str_count(chunk_structure, "RES"),
         phas = str_count(chunk_structure, "PHAS"),
         retr = str_count(chunk_structure, "RETR"),
         res_phas_retr = res + phas + retr,
         n_predecations = str_count(chunk_structure, "\\["),
         ratio = res_phas_retr/n_predecations) |> 
  arrange(ratio) |> 
  mutate(age2 = if_else(age == 100, "ad", as.character(age)),
         new_source = str_c(new_source, " (", age2, ")"),
         new_source = fct_inorder(new_source)) |> 
  ggplot(aes(ratio, new_source, fill = group_var)) +
  geom_col() +
  labs(y = NULL,
       x = "ratio of RES, PHAS or RETR forms",
       fill = NULL)
```

### Kpelle

> Kpelle: calculate individual ratios of RETR+RES+IMPF to text length in predications outside RS

```{r}
kpelle_corpus |> 
  select(new_source, group_var, chunk_structure) |> 
  mutate(chunk_structure = str_remove_all(chunk_structure, "rs%.*?%"),
         res = str_count(chunk_structure, "RES"),
         impf = str_count(chunk_structure, "IMPF"),
         retr = str_count(chunk_structure, "RETR")) |> 
  summarise(res = sum(res),
            impf = sum(impf),
            retr = sum(retr)) ->
  res_impf_retr

percantage_res_k <- round((res_impf_retr$res)/n_predecations_without_RS_k*100)
percantage_impf_k <- round((res_impf_retr$impf)/n_predecations_without_RS_k*100)
percantage_retr_k <- round((res_impf_retr$retr)/n_predecations_without_RS_k*100)

res_impf_retr_sum_k <- sum(res_impf_retr)
percantage_res_impf_retr_k <- round((res_impf_retr_sum_k)/n_predecations_without_RS_k*100)
```

- There are only `r res_impf_retr_sum_k` utterances of RES/IMPF/RETR outside of RS (`r percantage_res_impf_retr_k`%).
- There are only `r res_impf_retr$res` utterances of RES outside of RS (`r percantage_res_k`%). 
- There are only `r res_impf_retr$impf` utterances of IMPF outside of RS (`r percantage_impf_k`%). 
- There are only `r res_impf_retr$retr` utterances of RETR outside of RS (`r percantage_retr_k`%).

```{r}
kpelle_corpus |> 
  select(new_source, age, group_var, chunk_structure) |> 
  mutate(chunk_structure = str_remove_all(chunk_structure, "rs%.*?%"),
         res = str_count(chunk_structure, "RES"),
         impf = str_count(chunk_structure, "IMPF"),
         retr = str_count(chunk_structure, "RETR"),
         res_impf_retr = res + impf + retr,
         n_predecations = str_count(chunk_structure, "\\["),
         ratio = res_impf_retr/n_predecations) |> 
  arrange(ratio) |> 
  mutate(new_source = str_c(new_source, " (", age, ")"),
         new_source = fct_inorder(new_source)) |> 
  ggplot(aes(ratio, new_source, fill = group_var)) +
  geom_col() +
  labs(y = NULL,
       x = "ratio of RES, PHAS or RETR forms",
       fill = NULL)
```

## DUR

### Mano

> Mano: calculate and visualize individual ratios of DUR to text length in predications outside RS

```{r}
mano_corpus |> 
  select(new_source, age, group_var, chunk_structure) |> 
  mutate(chunk_structure = str_remove_all(chunk_structure, "rs%.*?%"),
         dur = str_count(chunk_structure, "DUR"),
         n_predecations = str_count(chunk_structure, "\\["),
         ratio = dur/n_predecations) |> 
  arrange(ratio) |> 
  mutate(age2 = if_else(age == 100, "ad", as.character(age)),
         new_source = str_c(new_source, " (", age2, ")"),
         new_source = fct_inorder(new_source)) |> 
  ggplot(aes(ratio, new_source, fill = group_var)) +
  geom_col() +
  labs(y = NULL,
       x = "ratio of DUR forms",
       fill = NULL)
```

> Mano & Kpelle: visualize which TAMP constructions are used with DUR (check all forms that have the _DUR extension, such as PST_DUR, separate DUR and regroup the remainder of the forms in the same way as you did when visualizing tense diversity)

```{r}
mano_corpus |> 
  select(new_source, group_var, chunk_structure) |> 
  mutate(dur_ext = str_extract_all(chunk_structure, "_[A-Z]*?_DUR")) |> 
  select(-chunk_structure) |> 
  unnest_longer(dur_ext) |> 
  mutate(dur_ext = str_remove_all(dur_ext, "_DUR"),
         dur_ext = str_remove_all(dur_ext, "_")) |> 
  count(new_source, group_var, dur_ext) |> 
  pivot_wider(names_from = dur_ext, values_from = n, values_fill = 0)

mano_corpus |> 
  select(new_source, age, group_var, chunk_structure) |> 
  mutate(dur_ext = str_extract_all(chunk_structure, "_[A-Z]*?_DUR")) |> 
  select(-chunk_structure) |> 
  unnest_longer(dur_ext) |> 
  mutate(dur_ext = str_remove_all(dur_ext, "_DUR"),
         dur_ext = str_remove_all(dur_ext, "_")) |> 
  count(new_source, age, group_var, dur_ext) |> 
  group_by(new_source, age, group_var) |> 
  mutate(total = sum(n),
         ratio = n/total) |> 
  select(-n, -total) |> 
  ungroup() |> 
  mutate(age2 = if_else(age == 100, "ad", as.character(age)),
         new_source = str_c(new_source, " (", age2, ")"),
         new_source = fct_reorder(new_source, age),
         label = str_c(round(ratio * 100), "%")) |>
  filter(ratio > 0) |>
  ggplot(aes(x = ratio, y = new_source, label = label, color = dur_ext)) +
  geom_col(aes(fill = dur_ext)) +
  geom_label(position = position_fill(vjust = 0.5), fill = "white") +
  scale_x_continuous(label = scales::percent) +
  labs(x = NULL, y = NULL, fill = NULL, color = NULL) +
  theme(axis.text.y = element_text(colour = people_text_color_m)) +
  guides(color="none")
```

### Kpelle

> Kpelle: calculate individual ratios of DUR+STATni to text length in predications outside RS

```{r}
kpelle_corpus |> 
  select(new_source, age, group_var, chunk_structure) |> 
  mutate(chunk_structure = str_remove_all(chunk_structure, "rs%.*?%"),
         dur = str_count(chunk_structure, "DUR"),
         statni = str_count(chunk_structure, "STATni"),
         n_predecations = str_count(chunk_structure, "\\["),
         ratio = (dur+statni)/n_predecations) |> 
  arrange(ratio) |> 
  mutate(new_source = str_c(new_source, " (", age, ")"),
         new_source = fct_inorder(new_source)) |> 
  ggplot(aes(ratio, new_source, fill = group_var)) +
  geom_col() +
  labs(y = NULL,
       x = "ratio of DUR or STATni forms",
       fill = NULL)
```

> Mano & Kpelle: visualize which TAMP constructions are used with DUR (check all forms that have the _DUR extension, such as PST_DUR, separate DUR and regroup the remainder of the forms in the same way as you did when visualizing tense diversity)

```{r}
kpelle_corpus |> 
  select(new_source, group_var, chunk_structure) |> 
  mutate(dur_ext = str_extract_all(chunk_structure, "_[A-Z]*?_DUR")) |> 
  select(-chunk_structure) |> 
  unnest_longer(dur_ext) |> 
  mutate(dur_ext = str_remove_all(dur_ext, "_DUR"),
         dur_ext = str_remove_all(dur_ext, "_")) |> 
  count(new_source, group_var, dur_ext) |> 
  pivot_wider(names_from = dur_ext, values_from = n, values_fill = 0)

kpelle_corpus |> 
  select(new_source, age, group_var, chunk_structure) |> 
  mutate(dur_ext = str_extract_all(chunk_structure, "_[A-Z]*?_DUR")) |> 
  select(-chunk_structure) |> 
  unnest_longer(dur_ext) |> 
  mutate(dur_ext = str_remove_all(dur_ext, "_DUR"),
         dur_ext = str_remove_all(dur_ext, "_")) |> 
  count(new_source, age, group_var, dur_ext) |> 
  group_by(new_source, age, group_var) |> 
  mutate(total = sum(n),
         ratio = n/total) |> 
  select(-n, -total) |> 
  ungroup() |> 
  mutate(age2 = if_else(age == 100, "ad", as.character(age)),
         new_source = str_c(new_source, " (", age2, ")"),
         new_source = fct_reorder(new_source, age),
         label = str_c(round(ratio * 100), "%")) |>
  filter(ratio > 0) |>
  ggplot(aes(x = ratio, y = new_source, label = label, color = dur_ext)) +
  geom_col(aes(fill = dur_ext)) +
  geom_label(position = position_fill(vjust = 0.5), fill = "white") +
  scale_x_continuous(label = scales::percent) +
  labs(x = NULL, y = NULL, fill = NULL, color = NULL) +
  guides(color="none")
```

## Complex syntax

### Mano

> Mano: visualize subset of complex syntax: the ratio of  prefixes (temp, prec, cond, comme, tail-head, ht[, ht{), + glosses (COND, not the macrocategory but only the gloss) + "clause-final ā as the only marker of subordination" (search in the comment field, column AA) to all predications, without filtering RS

```{r}
mano_corpus |> 
  select(new_source, age, group_var, chunk_structure, comment) |> 
  mutate(temp = str_count(chunk_structure, "temp"),
         prec = str_count(chunk_structure, "prec"),
         cond = str_count(chunk_structure, "cond"),
         tail_head = str_count(chunk_structure, "tail-head"),
         ht = str_count(chunk_structure, "ht[\\[\\{]"),
         cond = str_count(chunk_structure, "COND"),
         clause_final_a = str_count(comment, "clause-final ā as the only marker of subordination"),
         sum_of_all = temp+prec+cond+tail_head+ht+cond+clause_final_a,
         n_predecations = str_count(chunk_structure, "\\["),
         ratio = sum_of_all/n_predecations) |> 
  select(-comment, -chunk_structure)

mano_corpus |> 
  select(new_source, age, group_var, chunk_structure, comment) |> 
  mutate(temp = str_count(chunk_structure, "temp"),
         prec = str_count(chunk_structure, "prec"),
         cond = str_count(chunk_structure, "cond"),
         tail_head = str_count(chunk_structure, "tail-head"),
         ht = str_count(chunk_structure, "ht[\\[\\{]"),
         cond = str_count(chunk_structure, "COND"),
         clause_final_a = str_count(comment, "clause-final ā as the only marker of subordination"),
         sum_of_all = temp+prec+cond+tail_head+ht+cond+clause_final_a,
         n_predecations = str_count(chunk_structure, "\\["),
         ratio = sum_of_all/n_predecations) |> 
  select(-comment, -chunk_structure) |> 
  arrange(ratio) |> 
  mutate(age2 = if_else(age == 100, "ad", as.character(age)),
         new_source = str_c(new_source, " (", age2, ")"),
         new_source = fct_inorder(new_source)) |> 
  ggplot(aes(ratio, new_source, fill = group_var))+
  geom_col()+
  labs(y = NULL, fill = NULL)
```

### Kpelle

> Kpelle:  visualize subset of complex syntax: the ratio of prefixes (temp, comme, cond, tail-head, ht[, ht{ ) + glosses (COND) + clause-final í (search cells containing "clause-final í as the only marker of subordination" in column AA) to all predications, without filtering RS

```{r}
kpelle_corpus |> 
  select(new_source, age, group_var, chunk_structure, comment) |> 
  mutate(temp = str_count(chunk_structure, "temp"),
         comme = str_count(chunk_structure, "comme"),
         cond = str_count(chunk_structure, "cond"),
         tail_head = str_count(chunk_structure, "tail-head"),
         ht = str_count(chunk_structure, "ht[\\[\\{]"),
         cond = str_count(chunk_structure, "COND"),
         clause_final_i = str_count(comment, "clause-final i"),
         sum_of_all = temp+comme+cond+tail_head+ht+cond+clause_final_i,
         n_predecations = str_count(chunk_structure, "\\["),
         ratio = sum_of_all/n_predecations) |> 
  select(-comment, -chunk_structure)

kpelle_corpus |> 
  select(new_source, age, group_var, chunk_structure, comment) |> 
  mutate(temp = str_count(chunk_structure, "temp"),
         comme = str_count(chunk_structure, "comme"),
         cond = str_count(chunk_structure, "cond"),
         tail_head = str_count(chunk_structure, "tail-head"),
         ht = str_count(chunk_structure, "ht[\\[\\{]"),
         cond = str_count(chunk_structure, "COND"),
         clause_final_i = str_count(comment, "clause-final i"),
         sum_of_all = temp+comme+cond+tail_head+ht+cond+clause_final_i,
         n_predecations = str_count(chunk_structure, "\\["),
         ratio = sum_of_all/n_predecations) |> 
  select(-comment, -chunk_structure) |> 
  arrange(ratio) |> 
  mutate(new_source = str_c(new_source, " (", age, ")"),
         new_source = fct_inorder(new_source)) |> 
  ggplot(aes(ratio, new_source, fill = group_var))+
  geom_col()+
  labs(y = NULL, fill = NULL)
```

## PURP

### Mano

> Mano & Kpelle: check purp (prefix) + PURP to all predications, without filtering

```{r}
mano_corpus |> 
  select(new_source, age, group_var, chunk_structure) |> 
  mutate(purp_gloss = str_count(chunk_structure, "PURP"),
         purp_prefix = str_count(chunk_structure, "purp"),
         n_predecations = str_count(chunk_structure, "\\["),
         ratio = (purp_gloss+purp_prefix)/n_predecations) |> 
  arrange(ratio) |> 
  mutate(age2 = if_else(age == 100, "ad", as.character(age)),
         new_source = str_c(new_source, " (", age2, ")"),
         new_source = fct_inorder(new_source)) |> 
  ggplot(aes(ratio, new_source, fill = group_var)) +
  geom_col() +
  labs(y = NULL,
       x = "ratio of PURP",
       fill = NULL)
```

### Kpelle

> Mano & Kpelle: check purp (prefix) + PURP to all predications, without filtering

```{r}
kpelle_corpus |> 
  select(new_source, age, group_var, chunk_structure) |> 
  mutate(purp_gloss = str_count(chunk_structure, "PURP"),
         purp_prefix = str_count(chunk_structure, "purp"),
         n_predecations = str_count(chunk_structure, "\\["),
         ratio = (purp_gloss+purp_prefix)/n_predecations) |> 
  arrange(ratio) |> 
  mutate(age2 = if_else(age == 100, "ad", as.character(age)),
         new_source = str_c(new_source, " (", age2, ")"),
         new_source = fct_inorder(new_source)) |> 
  ggplot(aes(ratio, new_source, fill = group_var)) +
  geom_col() +
  labs(y = NULL,
       x = "ratio of PURP",
       fill = NULL)
```

## quot and jnt

### Mano

> Visualize ratios of jnt vs jnt.say
> Visualize ratios of jnt.say vs other.say
> Visualize different .say constructions (visualize like the initial visualisations in the paper, with a color plot)

### Kpelle

> Visualize ratios of quot vs jnt.say
> Visualize ratios of jnt vs quot + jnt.say
> Visualize ratios of quot+jnt.say vs other.say
> Visualize ratios quot + different .say constructions (visualize like the initial visualisations in the paper, with a color plot) 

## reference tracking

### Mano

> Mano & Kpelle: visualize reference tracking: pro(CR) to pro(SR)

```{r}
mano_corpus |> 
  select(new_source, age, group_var, chunk_structure) |> 
  mutate(cr = str_count(chunk_structure, "pro\\(CR\\)"),
         sr = str_count(chunk_structure, "pro\\(SR\\)"),
         ratio = cr/(sr+cr)) |> 
  arrange(ratio) 

mano_corpus |> 
  select(new_source, age, group_var, chunk_structure) |> 
  mutate(cr = str_count(chunk_structure, "pro\\(CR\\)"),
         sr = str_count(chunk_structure, "pro\\(SR\\)"),
         ratio = cr/(sr+cr)) |> 
  arrange(ratio)  |> 
  mutate(age2 = if_else(age == 100, "ad", as.character(age)),
         new_source = str_c(new_source, " (", age2, ")"),
         new_source = fct_inorder(new_source)) |> 
  ggplot(aes(ratio, new_source, fill = group_var)) +
  geom_col() +
  labs(y = NULL,
       x = "ratio of CR",
       fill = NULL)
```


### Kpelle

> Mano & Kpelle: visualize reference tracking: pro(CR) to pro(SR)

```{r}
kpelle_corpus |> 
  select(new_source, age, group_var, chunk_structure) |> 
  mutate(cr = str_count(chunk_structure, "pro\\(CR\\)"),
         sr = str_count(chunk_structure, "pro\\(SR\\)"),
         ratio = cr/(sr+cr)) |> 
  arrange(ratio) 

kpelle_corpus |> 
  select(new_source, age, group_var, chunk_structure) |> 
  mutate(cr = str_count(chunk_structure, "pro\\(CR\\)"),
         sr = str_count(chunk_structure, "pro\\(SR\\)"),
         ratio = cr/(sr+cr)) |> 
  arrange(ratio)  |> 
  mutate(new_source = str_c(new_source, " (", age, ")"),
         new_source = fct_inorder(new_source)) |> 
  ggplot(aes(ratio, new_source, fill = group_var)) +
  geom_col() +
  labs(y = NULL,
       x = "ratio of CR",
       fill = NULL)
```

## complex syntax

### Mano

> visualize complex syntax: all prefixes divided by the text length in predications; same thing within and outside RS

### Kpelle

> visualize complex syntax: all prefixes divided by the text length in predications; same thing within and outside RS